import pytest
from playwright.sync_api import Page, sync_playwright
from test_logger import log_result

# ------------------------------------------------------------------------------------
# Positive Test Scenario 01: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
# ------------------------------------------------------------------------------------

def test_login01_pos01():
    with sync_playwright() as p:    #check ‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ôfinish‡πÅ‡∏•‡πâ‡∏ß
        browser = p.chromium.launch(headless=False)
        page = browser.new_page()

        # ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ Login
        page.goto("https://reg.rmutk.ac.th/registrar/login.asp")

        # ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
        page.locator('input[name="f_uid"]').fill("65502100038-6")       #valid
        page.locator('input[name="f_pwd"]').fill("nan18331")            #valid
        page.locator('input[name="f_idcard"]').fill("1100801492928")    #valid

        # ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
        page.locator('input[type="submit"]').click()
        page.wait_for_load_state("networkidle") #wait for network(‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà)

        print(f"üìå DEBUG: Current Page URL ‚Üí {page.url}")   # URL

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        expected_url_prefix = "https://reg.rmutk.ac.th/registrar/changepwd.asp"
        
        if page.url.startswith(expected_url_prefix):
            actual_result = f"‚úÖ Login successful, redirected to 'Change Password' page: {page.url} "
        else:
            actual_result = f"‚ùå Login successful but redirected to wrong page: {page.url}"

        log_result("login01_pos01", actual_result, page=page)

        # Assert ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ URL ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        assert page.url.startswith(expected_url_prefix), "‚ùå Login did not redirect to Change Password page!"

        browser.close()

# ------------------------------------------------------------------------------------
# Positive Test Scenario 01 END 
# ------------------------------------------------------------------------------------



# ------------------------------------------------------------------------------------
# Negative Test Scenario 01: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞ ID ‡∏ú‡∏¥‡∏î)
# ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏µ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô
# ------------------------------------------------------------------------------------

def is_blue(rgb_string):
    rgb_values = [int(x) for x in rgb_string.replace("rgb(", "").replace(")", "").split(",")]
    r, g, b = rgb_values
    return r < 30 and g < 30 and b > 200 # returns T

def test_login01_neg01():
    with sync_playwright() as p:
        browser = p.chromium.launch(headless=False)
        page = browser.new_page()

        # ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ Login
        page.goto("https://reg.rmutk.ac.th/registrar/login.asp")

        page.locator('input[name="f_uid"]').fill("65502100038-6")   #valid
        page.locator('input[name="f_pwd"]').fill("wrongpassword")   #invalid
        page.locator('input[name="f_idcard"]').fill("555555")       #invalid

        page.locator('input[type="submit"]').click()
        page.wait_for_timeout(2000)

        try:
            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ element ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô XPath
            error_element = page.locator("xpath=//font[contains(text(),'‡∏Å ‡∏£‡∏∏ ‡∏ì ‡∏≤ ‡∏õ‡πâ ‡∏≠ ‡∏ô ‡∏£ ‡∏´‡∏± ‡∏™ ‡∏õ ‡∏£ ‡∏∞ ‡∏à ‡∏≥ ‡∏ï‡∏± ‡∏ß ‡∏ô ‡∏® .‡∏£ ‡∏´‡∏± ‡∏™ ‡∏ö‡∏± ‡∏ï ‡∏£ ‡∏õ ‡∏£ ‡∏∞ ‡∏ä ‡∏≤ ‡∏ä ‡∏ô ‡πÅ ‡∏• ‡∏∞ ‡∏£ ‡∏´‡∏± ‡∏™ ‡∏ú‡πà ‡∏≤ ‡∏ô ‡πÉ ‡∏´‡πâ ‡∏ñ‡∏π ‡∏Å ‡∏ï‡πâ ‡∏≠ ‡∏á')]").first
            assert error_element.is_visible()

            # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
            color = error_element.evaluate("el => window.getComputedStyle(el).color")
            print(f"üìå DEBUG: ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‚Üí {color}")

            if is_blue(color):
                actual_result = "‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô"
                status = "PASS"
            else:
                actual_result = f"‚ùå ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡πÅ‡∏ï‡πà‡∏™‡∏µ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÅ‡∏î‡∏á"
                status = "FAIL"

        except Exception:
            actual_result = "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"
            status = "FAIL"

        log_result("login01_neg01", actual_result, page=page)
        assert status == "PASS", "‚ùå ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏û‡∏ö ‡∏´‡∏£‡∏∑‡∏≠ ‡∏™‡∏µ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!"
        browser.close()

# ------------------------------------------------------------------------------------
# Negative Test Scenario 01 END
# ------------------------------------------------------------------------------------



# ------------------------------------------------------------------------------------
# Negative Test Scenario 02: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î (‡πÅ‡∏ï‡πà password ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
# ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏µ‡πÅ‡∏î‡∏á
# ------------------------------------------------------------------------------------

def test_login01_neg02():
    with sync_playwright() as p:
        browser = p.chromium.launch(headless=False)
        page = browser.new_page()

        page.goto("https://reg.rmutk.ac.th/registrar/login.asp")

        page.locator('input[name="f_uid"]').fill("65502100038-6")       #valid
        page.locator('input[name="f_pwd"]').fill("nan18331")            #valid
        page.locator('input[name="f_idcard"]').fill("wrongidcard")      #invalid

        page.locator('input[type="submit"]').click()
        page.wait_for_timeout(2000)

        try:
            error_element = page.locator("xpath=//font[contains(text(),'‡∏Å ‡∏£‡∏∏ ‡∏ì ‡∏≤ ‡∏õ‡πâ ‡∏≠ ‡∏ô ‡∏£ ‡∏´‡∏± ‡∏™ ‡∏õ ‡∏£ ‡∏∞ ‡∏à ‡∏≥ ‡∏ï‡∏± ‡∏ß ‡∏ô ‡∏® .‡∏£ ‡∏´‡∏± ‡∏™ ‡∏ö‡∏± ‡∏ï ‡∏£ ‡∏õ ‡∏£ ‡∏∞ ‡∏ä ‡∏≤ ‡∏ä ‡∏ô ‡πÅ ‡∏• ‡∏∞ ‡∏£ ‡∏´‡∏± ‡∏™ ‡∏ú‡πà ‡∏≤ ‡∏ô ‡πÉ ‡∏´‡πâ ‡∏ñ‡∏π ‡∏Å ‡∏ï‡πâ ‡∏≠ ‡∏á')]").first
            assert error_element.is_visible(), "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"

            actual_result = "‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å ‡∏£‡∏∏ ‡∏ì ‡∏≤ ‡∏õ‡πâ ‡∏≠ ‡∏ô ‡∏£ ‡∏´‡∏± ‡∏™ ‡∏õ ‡∏£ ‡∏∞ ‡∏à ‡∏≥ ‡∏ï‡∏± ‡∏ß ‡∏ô ‡∏® .‡∏£ ‡∏´‡∏± ‡∏™ ‡∏ö‡∏± ‡∏ï ‡∏£ ‡∏õ ‡∏£ ‡∏∞ ‡∏ä ‡∏≤ ‡∏ä ‡∏ô ‡πÅ ‡∏• ‡∏∞ ‡∏£ ‡∏´‡∏± ‡∏™ ‡∏ú‡πà ‡∏≤ ‡∏ô ‡πÉ ‡∏´‡πâ ‡∏ñ‡∏π ‡∏Å ‡∏ï‡πâ ‡∏≠ ‡∏á"
            status = "PASS"

        except Exception:
            actual_result = "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å ‡∏£‡∏∏ ‡∏ì ‡∏≤ ‡∏õ‡πâ ‡∏≠ ‡∏ô ‡∏£ ‡∏´‡∏± ‡∏™ ‡∏õ ‡∏£ ‡∏∞ ‡∏à ‡∏≥ ‡∏ï‡∏± ‡∏ß ‡∏ô ‡∏® .‡∏£ ‡∏´‡∏± ‡∏™ ‡∏ö‡∏± ‡∏ï ‡∏£ ‡∏õ ‡∏£ ‡∏∞ ‡∏ä ‡∏≤ ‡∏ä ‡∏ô ‡πÅ ‡∏• ‡∏∞ ‡∏£ ‡∏´‡∏± ‡∏™ ‡∏ú‡πà ‡∏≤ ‡∏ô ‡πÉ ‡∏´‡πâ ‡∏ñ‡∏π ‡∏Å ‡∏ï‡πâ ‡∏≠ ‡∏á"
            status = "FAIL"

        log_result("login01_neg02", actual_result, page=page)
        assert status == "PASS", "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô!"
        browser.close()

# ------------------------------------------------------------------------------------
# Negative Test Scenario 02 END 
# ------------------------------------------------------------------------------------



# ------------------------------------------------------------------------------------
# Negative Test Scenario 03: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
# ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡∏°‡∏µ‡∏™‡∏µ‡πÅ‡∏î‡∏á
# ------------------------------------------------------------------------------------

def is_red(rgb_string):
    rgb_values = [int(x) for x in rgb_string.replace("rgb(", "").replace(")", "").split(",")]
    r, g, b = rgb_values
    return r > 200 and g < 50 and b < 50


def test_login01_neg03():
    with sync_playwright() as p:
        browser = p.chromium.launch(headless=False)
        page = browser.new_page()

        page.goto("https://reg.rmutk.ac.th/registrar/login.asp")

        page.locator('input[name="f_uid"]').fill("")  
        page.locator('input[name="f_pwd"]').fill("")  
        page.locator('input[name="f_idcard"]').fill("")  

        page.locator('input[type="submit"]').click()
        page.wait_for_timeout(2000)

        try:
            error_element = page.locator("xpath=//font[contains(text(),'‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')]").first
            assert error_element.is_visible(), "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"

            color = error_element.evaluate("el => window.getComputedStyle(el).color")
            print(f"üìå DEBUG: ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‚Üí {color}")

            if is_red(color):
                actual_result = "‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÅ‡∏î‡∏á"
                status = "PASS"
            else:
                actual_result = f"‚ùå ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÅ‡∏ï‡πà‡∏™‡∏µ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (color={color})"
                status = "FAIL"

        except Exception:
            actual_result = "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"
            status = "FAIL"

        log_result("login01_neg03", actual_result, page=page)
        assert status == "PASS", "‚ùå ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏™‡∏µ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÅ‡∏î‡∏á!"
        browser.close()

# ------------------------------------------------------------------------------------
# Negative Test Scenario 03 END 
# ------------------------------------------------------------------------------------



# ------------------------------------------------------------------------------------
# Negative Test Scenario 04 START
# ------------------------------------------------------------------------------------

def test_login01_neg04():
    with sync_playwright() as p:
        browser = p.chromium.launch(headless=False)
        page = browser.new_page()

        page.goto("https://reg.rmutk.ac.th/registrar/login.asp")

        page.locator('input[name="f_uid"]').fill("")  
        page.locator('input[name="f_pwd"]').fill("")  
        page.locator('input[name="f_idcard"]').fill("")  

        page.locator('input[type="submit"]').click()
        page.wait_for_timeout(2000)

        try:
            error_element = page.locator("xpath=//font[contains(text(),'‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')]").first
            assert error_element.is_visible(), "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"

            color = error_element.evaluate("el => window.getComputedStyle(el).color")
            print(f"üìå DEBUG: ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‚Üí {color}")

            if is_red(color):
                actual_result = "‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÅ‡∏î‡∏á"
                status = "PASS"
            else:
                actual_result = f"‚ùå ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÅ‡∏ï‡πà‡∏™‡∏µ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (color={color})"
                status = "FAIL"

        except Exception:
            actual_result = "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"
            status = "FAIL"

        log_result("login01_neg04", actual_result, page=page)
        assert status == "PASS", "‚ùå ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏™‡∏µ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÅ‡∏î‡∏á!"
        browser.close()

# ------------------------------------------------------------------------------------
# Negative Test Scenario 04 END 
# ------------------------------------------------------------------------------------




